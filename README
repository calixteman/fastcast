FASTCAST
--------

The goal of fastcast is to provide a fast alternative to dynamic_cast.
Each class in the hierarchy has an integer identifier. This identifier is built to make instanceof operation very fast.

Usage :
-----

Fastcast is easy to use:
i) include fastcast.hxx
ii) the root class (say A) must inherit from fastcast::fcast<A, uint64_t> (or an other integer type)
iii) each class in the hierarchy having children must typedef a fcast_hierarchy:

// typedef for the root class
typedef fastcast::hierarchy<fastcast::root, fastcast::children<B, C>> fcast_hierarchy;

// typedef for a class other than root
// The first template parameter gives the parent
// and the second define the children
typedef fastcast::hierarchy<A, fastcast::children<D>> fcast_hierarchy;

// here there is no child
typedef fastcast::hierarchy<D> fcast_hierarchy;

iv) Each ctor must set the identifier for the class:
struct B : public A
{
    typedef fastcast::hierarchy<A, fastcast::children<D>> fcast_hierarchy;

    B() { Fcast::set_id<B>(); }
};

v) the file test.cpp could be compiled in using:

clang++ -std=c++11 -oout test/test.cpp -I. && ./out

or

g++ -std=c++11 -oout test/test.cpp -I. && ./out